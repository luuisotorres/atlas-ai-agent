{
  "delete": "## üîç Enrichment: Delete\n\n**Definition:**  \nIn the context of SQL and programming, the `DELETE` command is primarily used to remove data. In SQL, the `DELETE` statement allows users to delete one or more rows from a table based on a specified condition. It is a DML (Data Manipulation Language) command that ensures that the data is removed but the database structure remains intact. In general programming, `delete` is a keyword used to deallocate memory and free up resources, mainly in languages that support manual memory management, like C++.\n\n**Example:**  \nSQL DELETE Statement:\n```sql\nDELETE FROM Employees WHERE employee_id = 10;\n```\nThis statement deletes the row from the `Employees` table where the `employee_id` is 10.\n\nIn C++:\n```cpp\nint* p = new int;\n*p = 5;\ndelete p; // Deallocates the memory assigned to p\np = nullptr; // Avoids dangling pointer issues\n```\nHere, `delete` is used to free up the memory allocated to the pointer `p`.\n\n**Further Reading:**\n- [W3Schools SQL DELETE Statement](https://www.w3schools.com/sql/sql_delete.asp)\n- [SQL Server DELETE and DROP TABLE Commands - GeeksforGeeks](https://www.geeksforgeeks.org/sql-server-delete-and-drop-table-commands/)\n- [SQL DELETE Statement - SQL Tutorial](https://www.sqltutorial.org/sql-delete/)",
  "table creation": "## üîç Enrichment: Table Creation\n\n**Definition:**  \nTable creation in SQL involves using the `CREATE TABLE` statement to define a new table within a database. A table stores data in rows and columns, where each column represents a specific attribute and each row corresponds to a record. The process includes specifying the table name, defining columns along with their data types, and setting constraints such as primary keys or foreign keys if necessary.\n\n**Example:**  \nBelow is an example of creating a simple `customer` table in SQL. This table includes a primary key (`customer_id`), as well as other columns such as `name`, `gender`, `age`, and `income` with corresponding data types.\n\n```sql\nCREATE TABLE customer (\n    customer_id INT PRIMARY KEY,\n    name VARCHAR(60) DEFAULT NULL,\n    gender CHAR(1) DEFAULT NULL,\n    age INT DEFAULT NULL,\n    income DECIMAL(18, 2) DEFAULT NULL\n);\n```\n\n**Further Reading:**\n- [SQL CREATE TABLE Statement - W3Schools](https://www.w3schools.com/sql/sql_create_table.asp)\n- [SQL CREATE TABLE Statement - SQL Tutorial](https://www.sqltutorial.org/sql-create-table/)\n- [CREATE TABLE (Transact-SQL) - Microsoft Learn](https://learn.microsoft.com/en-us/sql/t-sql/statements/create-table-transact-sql?view=sql-server-ver16)\n- [How to Create Your First Table in SQL - LearnSQL.com](https://learnsql.com/blog/how-to-create-table-sql/)\n- [Step-by-Step Guide to Creating a Table in SQL - SQL Easy](https://www.sql-easy.com/learn/how-to-create-a-table-in-sql/)",
  "left joins": "## üîç Enrichment: Left Joins\n\n**Definition:**  \nIn SQL, a Left Join is used to combine rows from two or more tables based on a related column between them. It returns all records from the left table (table1), and the matched records from the right table (table2). If there is no match, the result is NULL from the right side.\n\n**Example:**  \nConsider two tables: `Customers` and `Orders`. The `Customers` table may have a list of all customers, while the `Orders` table contains records of purchases made by these customers. A Left Join between these tables will list all customers, along with their orders if they have any. If a customer does not have any orders, the order details will show as NULL.\n\n```sql\nSELECT Customers.CustomerName, Orders.OrderID\nFROM Customers\nLEFT JOIN Orders ON Customers.CustomerID = Orders.CustomerID;\n```\n\nIn this example, even customers with no orders will appear in the result set, with `NULL` values in the corresponding `OrderID` column.\n\n**Further Reading:**\n- [SQL LEFT JOIN Keyword - W3Schools](https://www.w3schools.com/sql/sql_join_left.asp)\n- [SQL Joins (Inner, Left, Right and Full Join) - GeeksforGeeks](https://www.geeksforgeeks.org/sql-join-set-1-inner-left-right-and-full-joins/)\n- [9 Practical Examples of SQL LEFT JOIN - LearnSQL.com](https://learnsql.com/blog/left-join-examples/)",
  "from": "## üîç Enrichment: `from` Keyword in Python\n\n**Definition:**  \nThe `from` keyword in Python is used to import specific parts of a module into your current namespace. This approach allows for direct access to the imported components without needing to prefix them with the module name, thus making the code cleaner and more efficient. The `from` keyword can also be used in specialized contexts, such as generator functions to delegate operations to another iterable, and exception handling to indicate exception chaining.\n\n**Example:**  \nUsing the `from` keyword, you can import specific functions from a module like `math`:\n\n```python\nfrom math import sqrt, pi\n\nprint(sqrt(16))  # Outputs: 4.0\nprint(pi)        # Outputs: 3.141592653589793\n```\n\nIn this example, only `sqrt` and `pi` from the `math` module are imported, allowing their direct use without the `math.` prefix.\n\n**Further Reading:**\n- [Python 'from' Keyword - W3Schools](https://www.w3schools.com/python/ref_keyword_from.asp)\n- [Python 'from' Keyword - GeeksforGeeks](https://www.geeksforgeeks.org/python-from-keyword/)\n- [Python's 'from' keyword - Real Python](https://realpython.com/ref/keywords/from/)\n- [Python 'from' Keyword - Online Tutorials Library](https://www.tutorialspoint.com/python/python_from_keyword.htm)",
  "varchar": "## üîç Enrichment: Varchar\n\n**Definition:**  \n`VARCHAR` is a data type in SQL that refers to a variable character field used to store character data of varying length. Unlike the `CHAR` data type, which has a fixed length, `VARCHAR` allows storages of data that may not occupy the same amount of space for every entry. This is advantageous when the sizes of the data values vary significantly, as it can save storage space.\n\n**Example:**  \nIn a database, if you have a column designated for storing email addresses, which typically vary in length, using a `VARCHAR` type is efficient. Here's a SQL example:\n\n```sql\nCREATE TABLE customers (\n    customer_id INT PRIMARY KEY,\n    email VARCHAR(255)\n);\n```\n\nIn this table, the `email` column can store any email address up to 255 characters in length, optimizing the space efficiency as it only uses the space needed for each email plus an additional byte to store the length.\n\n**Further Reading:**\n- [CHAR vs VARCHAR in SQL - GeeksforGeeks](https://www.geeksforgeeks.org/char-vs-varchar-in-sql/)\n- [SQL Data Types for MySQL, SQL Server, and MS Access - W3Schools](https://www.w3schools.com/sql/sql_datatypes.asp)\n- [SQL varchar data type deep dive - SQL Shack](https://www.sqlshack.com/sql-varchar-data-type-deep-dive/)\n- [char and varchar (Transact-SQL) - SQL Server | Microsoft Learn](https://learn.microsoft.com/en-us/sql/t-sql/data-types/char-and-varchar-transact-sql?view=sql-server-ver16)\n- [Varchar - Wikipedia](https://en.wikipedia.org/wiki/Varchar)"
}